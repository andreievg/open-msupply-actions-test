{
  "version": 3,
  "sources": ["../../../../utils.js", "../src/utils.js", "../src/convert_data.js"],
  "sourcesContent": ["const cleanUpNodes = (nodes) => {\n  let cleanNodes = [];\n  nodes.forEach((node) => {\n    if (Object.keys(node).length != 0) {\n      cleanNodes.push(cleanUpObject(node));\n    }\n  });\n  return cleanNodes;\n};\n\nconst cleanUpObject = (node) => {\n  let newNode = {};\n  // remove empty keys which will fail to parse\n  Object.keys(node).forEach(function (key) {\n    if (node[key] !== \"\" && node[key] !== undefined && node[key] !== null) {\n      if (typeof node[key] === \"object\") {\n        // recursively remove empty strings or undefined from graphql query\n        newNode[key] = cleanUpObject(node[key]);\n      } else {\n        newNode[key] = node[key];\n      }\n    }\n  });\n  return newNode;\n};\n\nmodule.exports = {\n  cleanUpObject,\n  cleanUpNodes,\n};\n", "import { cleanUpNodes } from \"../../../../utils\";\n\nconst processItemLines = (data, sort, dir) => {\n  data.items.nodes.forEach((item) => {\n    // don't add default values if empty object added\n    if (Object.keys(item).length == 0) {\n      return;\n    }\n    item.monthConsumption = calculateQuantity(\n      data.thisMonthConsumption,\n      item.id\n    );\n    item.lastMonthConsumption = calculateQuantity(\n      data.lastMonthConsumption,\n      item.id\n    );\n    item.twoMonthsAgoConsumption = calculateQuantity(\n      data.twoMonthsAgoConsumption,\n      item.id\n    );\n    item.expiringInSixMonths = calculateQuantity(\n      data.expiringInSixMonths,\n      item.id\n    );\n    item.expiringInTwelveMonths = calculateQuantity(\n      data.expiringInTwelveMonths,\n      item.id\n    );\n    item.stockOnOrder = calculateQuantity(data.stockOnOrder, item.id);\n    item.AMC12 = calculateQuantity(data.AMCTwelve, item.id);\n    item.AMC24 = calculateQuantity(data.AMCTwentyFour, item.id);\n    item.SOH = calculateStatValue(item?.stats?.availableStockOnHand);\n    item.MOS = calculateStatValue(item?.stats?.availableMonthsOfStockOnHand);\n  });\n  let cleanNodes = cleanUpNodes(data.items.nodes);\n  let sortedNodes = sortNodes(cleanNodes, sort, dir);\n  return sortedNodes;\n};\n\n// function adds month consumption to data  (either this or last month)\nconst calculateQuantity = (queryResult, id) => {\n  let quantity = 0;\n  if (!!queryResult && !!id) {\n    const node = queryResult.find((element) => element.item_id == id);\n    quantity = node?.quantity ? node.quantity : 0;\n  }\n  return quantity;\n};\n\nconst calculateStatValue = (value) => {\n  let returnValue = 0;\n  if (!!value) {\n    // round to 1 decimal\n    returnValue = Math.round(value * 10) / 10;\n  }\n  return returnValue;\n};\n\nfunction getNestedValue(node, key) {\n  key = key + \"\";\n  return key.split(\".\").reduce((value, part) => value && value[part], node);\n}\n\nconst sortNodes = (nodes, sort, dir) => {\n  // assign default values\n  sort = sort ?? \"expiryDate\";\n  dir = dir ?? \"desc\";\n  nodes.sort((a, b) => {\n    const valueA = getNestedValue(a, sort);\n    const valueB = getNestedValue(b, sort);\n\n    if (valueA === valueB) {\n      return 0;\n    }\n\n    if (dir === \"asc\") {\n      return valueA > valueB ? 1 : -1;\n    } else {\n      return valueA < valueB ? 1 : -1;\n    }\n  });\n\n  return nodes;\n};\n\nmodule.exports = {\n  calculateQuantity,\n  calculateStatValue,\n  processItemLines,\n  cleanUpNodes,\n  sortNodes,\n};\n", "import { processItemLines } from \"./utils\";\n\nfunction convert_data() {\n  const res = JSON.parse(Host.inputString());\n  console.log(\"arguments\", res?.arguments?.sort, res?.arguments?.dir);\n  res.data.items.nodes = processItemLines(\n    res.data,\n    res?.arguments?.sort ?? undefined,\n    res?.arguments?.dir ?? undefined\n  );\n  Host.outputString(JSON.stringify(res));\n}\n\nmodule.exports = {\n  convert_data,\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "require_utils", "exports", "module", "import_utils", "processItemLines"]
}
