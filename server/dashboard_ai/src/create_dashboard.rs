use crate::gemini::GeminiClient;
use crate::grafana::Dashboard;
use crate::grafana::GrafanaClient;
use anyhow::Context;
use anyhow::Result;

pub async fn run_gemini_dashboard_generation(prompt: &str, dashboard_name: &str) -> Result<()> {
    let grafana_url =
        std::env::var("GRAFANA_URL").context("GRAFANA_URL environment variable not set")?;
    let api_key =
        std::env::var("GRAFANA_API_KEY").context("GRAFANA_API_KEY environment variable not set")?;
    let grafana_client = GrafanaClient::new(grafana_url, api_key);

    let gemini_api_key =
        std::env::var("GEMINI_API_KEY").context("GEMINI_API_KEY environment variable not set")?;
    let gemini_client = GeminiClient::new(gemini_api_key);

    let datasource = grafana_client.get_default_datasource().await?;
    // Generate dashboard using Gemini
    let dashboard_json = gemini_client
        .generate_dashboard(prompt, datasource, dashboard_name)
        .await?;

    let dashboard = serde_json::from_value::<Dashboard>(dashboard_json.clone())
        .context("Could not parse dashboard JSON")
        .context(serde_json::to_string_pretty(&dashboard_json).unwrap())?;

    grafana_client
        .upsert_dashboard(
            dashboard,
            None,
            Some("Generated by Gemini AI".to_string()),
            true,
        )
        .await
        .context("Could not upsert dashboard in Grafana")
        .context(serde_json::to_string_pretty(&dashboard_json).unwrap())?;

    Ok(())
}
